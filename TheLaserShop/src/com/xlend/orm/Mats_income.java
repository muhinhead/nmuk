// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sun Jan 15 18:37:36 CET 2023
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Mats_income extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer incomeID = null;
    private Timestamp dtTime = null;
    private Integer incoming = null;
    private Integer restAfterIncome = null;
    private Integer itemID = null;
    private Integer userID = null;

    public Mats_income(Connection connection) {
        super(connection, "mats_income", "incomeID");
        setColumnNames(new String[]{"incomeID", "dtTime", "incoming", "restAfterIncome", "itemID", "userID"});
    }

    public Mats_income(Connection connection, Integer incomeID, Timestamp dtTime, Integer incoming, Integer restAfterIncome, Integer itemID, Integer userID) {
        super(connection, "mats_income", "incomeID");
        setNew(incomeID.intValue() <= 0);
//        if (incomeID.intValue() != 0) {
            this.incomeID = incomeID;
//        }
        this.dtTime = dtTime;
        this.incoming = incoming;
        this.restAfterIncome = restAfterIncome;
        this.itemID = itemID;
        this.userID = userID;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Mats_income mats_income = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT incomeID,dtTime,incoming,restAfterIncome,itemID,userID FROM mats.income WHERE incomeID=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                mats_income = new Mats_income(getConnection());
                mats_income.setIncomeID(new Integer(rs.getInt(1)));
                mats_income.setDtTime(rs.getTimestamp(2));
                mats_income.setIncoming(new Integer(rs.getInt(3)));
                mats_income.setRestAfterIncome(new Integer(rs.getInt(4)));
                mats_income.setItemID(new Integer(rs.getInt(5)));
                mats_income.setUserID(new Integer(rs.getInt(6)));
                mats_income.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return mats_income;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO mats.income ("+(getIncomeID().intValue()!=0?"incomeID,":"")+"dtTime,incoming,restAfterIncome,itemID,userID) values("+(getIncomeID().intValue()!=0?"?,":"")+"?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getIncomeID().intValue()!=0) {
                 ps.setObject(++n, getIncomeID());
             }
             ps.setObject(++n, getDtTime());
             ps.setObject(++n, getIncoming());
             ps.setObject(++n, getRestAfterIncome());
             ps.setObject(++n, getItemID());
             ps.setObject(++n, getUserID());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getIncomeID().intValue()==0) {
             stmt = "SELECT max(incomeID) FROM mats.income";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setIncomeID(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE mats.income " +
                    "SET dtTime = ?, incoming = ?, restAfterIncome = ?, itemID = ?, userID = ?" + 
                    " WHERE incomeID = " + getIncomeID();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getDtTime());
                ps.setObject(2, getIncoming());
                ps.setObject(3, getRestAfterIncome());
                ps.setObject(4, getItemID());
                ps.setObject(5, getUserID());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM mats.income " +
                "WHERE incomeID = " + getIncomeID();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setIncomeID(new Integer(-getIncomeID().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getIncomeID().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT incomeID,dtTime,incoming,restAfterIncome,itemID,userID FROM mats.income " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Mats_income(con,new Integer(rs.getInt(1)),rs.getTimestamp(2),new Integer(rs.getInt(3)),new Integer(rs.getInt(4)),new Integer(rs.getInt(5)),new Integer(rs.getInt(6))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Mats_income[] objects = new Mats_income[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Mats_income mats_income = (Mats_income) lst.get(i);
            objects[i] = mats_income;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT incomeID FROM mats.income " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getIncomeID() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return incomeID;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setIncomeID(id);
        setNew(prevIsNew);
    }

    public Integer getIncomeID() {
        return incomeID;
    }

    public void setIncomeID(Integer incomeID) throws ForeignKeyViolationException {
        setWasChanged(this.incomeID != null && this.incomeID != incomeID);
        this.incomeID = incomeID;
        setNew(incomeID.intValue() == 0);
    }

    public Timestamp getDtTime() {
        return dtTime;
    }

    public void setDtTime(Timestamp dtTime) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.dtTime != null && !this.dtTime.equals(dtTime));
        this.dtTime = dtTime;
    }

    public Integer getIncoming() {
        return incoming;
    }

    public void setIncoming(Integer incoming) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.incoming != null && !this.incoming.equals(incoming));
        this.incoming = incoming;
    }

    public Integer getRestAfterIncome() {
        return restAfterIncome;
    }

    public void setRestAfterIncome(Integer restAfterIncome) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.restAfterIncome != null && !this.restAfterIncome.equals(restAfterIncome));
        this.restAfterIncome = restAfterIncome;
    }

    public Integer getItemID() {
        return itemID;
    }

    public void setItemID(Integer itemID) throws SQLException, ForeignKeyViolationException {
        if (itemID!=null && !Mats_item.exists(getConnection(),"itemID = " + itemID)) {
            throw new ForeignKeyViolationException("Can't set itemID, foreign key violation: key");
        }
        setWasChanged(this.itemID != null && !this.itemID.equals(itemID));
        this.itemID = itemID;
    }

    public Integer getUserID() {
        return userID;
    }

    public void setUserID(Integer userID) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.userID != null && !this.userID.equals(userID));
        this.userID = userID;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[6];
        columnValues[0] = getIncomeID();
        columnValues[1] = getDtTime();
        columnValues[2] = getIncoming();
        columnValues[3] = getRestAfterIncome();
        columnValues[4] = getItemID();
        columnValues[5] = getUserID();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setIncomeID(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setIncomeID(null);
        }
        setDtTime(toTimeStamp(flds[1]));
        try {
            setIncoming(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setIncoming(null);
        }
        try {
            setRestAfterIncome(Integer.parseInt(flds[3]));
        } catch(NumberFormatException ne) {
            setRestAfterIncome(null);
        }
        try {
            setItemID(Integer.parseInt(flds[4]));
        } catch(NumberFormatException ne) {
            setItemID(null);
        }
        try {
            setUserID(Integer.parseInt(flds[5]));
        } catch(NumberFormatException ne) {
            setUserID(null);
        }
    }
}
