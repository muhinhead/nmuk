// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat Jan 14 19:19:23 CET 2023
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Mats_usr extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer userID = null;
    private String login = null;
    private String password = null;
    private Integer isAdmin = null;
    private String position = null;
    private String firstName = null;
    private String secondName = null;
    private String lastName = null;

    public Mats_usr(Connection connection) {
        super(connection, "mats_usr", "userID");
        setColumnNames(new String[]{"userID", "login", "password", "isAdmin", "position", "firstName", "secondName", "lastName"});
    }

    public Mats_usr(Connection connection, Integer userID, String login, String password, Integer isAdmin, String position, String firstName, String secondName, String lastName) {
        super(connection, "mats_usr", "userID");
        setNew(userID.intValue() <= 0);
//        if (userID.intValue() != 0) {
            this.userID = userID;
//        }
        this.login = login;
        this.password = password;
        this.isAdmin = isAdmin;
        this.position = position;
        this.firstName = firstName;
        this.secondName = secondName;
        this.lastName = lastName;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Mats_usr mats_usr = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT userID,login,password,isAdmin,position,firstName,secondName,lastName FROM mats.usr WHERE userID=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                mats_usr = new Mats_usr(getConnection());
                mats_usr.setUserID(new Integer(rs.getInt(1)));
                mats_usr.setLogin(rs.getString(2));
                mats_usr.setPassword(rs.getString(3));
                mats_usr.setIsAdmin(new Integer(rs.getInt(4)));
                mats_usr.setPosition(rs.getString(5));
                mats_usr.setFirstName(rs.getString(6));
                mats_usr.setSecondName(rs.getString(7));
                mats_usr.setLastName(rs.getString(8));
                mats_usr.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return mats_usr;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO mats.usr ("+(getUserID().intValue()!=0?"userID,":"")+"login,password,isAdmin,position,firstName,secondName,lastName) values("+(getUserID().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getUserID().intValue()!=0) {
                 ps.setObject(++n, getUserID());
             }
             ps.setObject(++n, getLogin());
             ps.setObject(++n, getPassword());
             ps.setObject(++n, getIsAdmin());
             ps.setObject(++n, getPosition());
             ps.setObject(++n, getFirstName());
             ps.setObject(++n, getSecondName());
             ps.setObject(++n, getLastName());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getUserID().intValue()==0) {
             stmt = "SELECT max(userID) FROM mats.usr";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setUserID(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE mats.usr " +
                    "SET login = ?, password = ?, isAdmin = ?, position = ?, firstName = ?, secondName = ?, lastName = ?" + 
                    " WHERE userID = " + getUserID();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getLogin());
                ps.setObject(2, getPassword());
                ps.setObject(3, getIsAdmin());
                ps.setObject(4, getPosition());
                ps.setObject(5, getFirstName());
                ps.setObject(6, getSecondName());
                ps.setObject(7, getLastName());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM mats.usr " +
                "WHERE userID = " + getUserID();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setUserID(new Integer(-getUserID().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getUserID().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT userID,login,password,isAdmin,position,firstName,secondName,lastName FROM mats.usr " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Mats_usr(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),new Integer(rs.getInt(4)),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Mats_usr[] objects = new Mats_usr[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Mats_usr mats_usr = (Mats_usr) lst.get(i);
            objects[i] = mats_usr;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT userID FROM mats.usr " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getUserID() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return userID;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setUserID(id);
        setNew(prevIsNew);
    }

    public Integer getUserID() {
        return userID;
    }

    public void setUserID(Integer userID) throws ForeignKeyViolationException {
        setWasChanged(this.userID != null && this.userID != userID);
        this.userID = userID;
        setNew(userID.intValue() == 0);
    }

    public String getLogin() {
        return login;
    }

    public void setLogin(String login) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.login != null && !this.login.equals(login));
        this.login = login;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.password != null && !this.password.equals(password));
        this.password = password;
    }

    public Integer getIsAdmin() {
        return isAdmin;
    }

    public void setIsAdmin(Integer isAdmin) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.isAdmin != null && !this.isAdmin.equals(isAdmin));
        this.isAdmin = isAdmin;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.position != null && !this.position.equals(position));
        this.position = position;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.firstName != null && !this.firstName.equals(firstName));
        this.firstName = firstName;
    }

    public String getSecondName() {
        return secondName;
    }

    public void setSecondName(String secondName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.secondName != null && !this.secondName.equals(secondName));
        this.secondName = secondName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.lastName != null && !this.lastName.equals(lastName));
        this.lastName = lastName;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[8];
        columnValues[0] = getUserID();
        columnValues[1] = getLogin();
        columnValues[2] = getPassword();
        columnValues[3] = getIsAdmin();
        columnValues[4] = getPosition();
        columnValues[5] = getFirstName();
        columnValues[6] = getSecondName();
        columnValues[7] = getLastName();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setUserID(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setUserID(null);
        }
        setLogin(flds[1]);
        setPassword(flds[2]);
        try {
            setIsAdmin(Integer.parseInt(flds[3]));
        } catch(NumberFormatException ne) {
            setIsAdmin(null);
        }
        setPosition(flds[4]);
        setFirstName(flds[5]);
        setSecondName(flds[6]);
        setLastName(flds[7]);
    }
}
