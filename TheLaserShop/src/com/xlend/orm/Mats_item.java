// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Mon Jan 16 10:04:18 CET 2023
// generated file: do not modify
package com.xlend.orm;

import com.xlend.orm.dbobject.DbObject;
import com.xlend.orm.dbobject.ForeignKeyViolationException;
import com.xlend.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Mats_item extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer itemID = null;
    private String invCode = null;
    private String name = null;
    private String colour = null;
    private Integer thickness = null;
    private Integer quantity = null;
    private String sheetSize = null;
    private Double sheetCost = null;
    private Integer sheetMarkup = null;
    private Integer mattypeID = null;

    public Mats_item(Connection connection) {
        super(connection, "mats_item", "itemID");
        setColumnNames(new String[]{"itemID", "invCode", "name", "colour", "thickness", "quantity", "sheetSize", "sheetCost", "sheetMarkup", "mattypeID"});
    }

    public Mats_item(Connection connection, Integer itemID, String invCode, String name, String colour, Integer thickness, Integer quantity, String sheetSize, Double sheetCost, Integer sheetMarkup, Integer mattypeID) {
        super(connection, "mats_item", "itemID");
        setNew(itemID.intValue() <= 0);
//        if (itemID.intValue() != 0) {
            this.itemID = itemID;
//        }
        this.invCode = invCode;
        this.name = name;
        this.colour = colour;
        this.thickness = thickness;
        this.quantity = quantity;
        this.sheetSize = sheetSize;
        this.sheetCost = sheetCost;
        this.sheetMarkup = sheetMarkup;
        this.mattypeID = mattypeID;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Mats_item mats_item = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT itemID,invCode,name,colour,thickness,quantity,sheetSize,sheetCost,sheetMarkup,mattypeID FROM mats_item WHERE itemID=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                mats_item = new Mats_item(getConnection());
                mats_item.setItemID(new Integer(rs.getInt(1)));
                mats_item.setInvCode(rs.getString(2));
                mats_item.setName(rs.getString(3));
                mats_item.setColour(rs.getString(4));
                mats_item.setThickness(new Integer(rs.getInt(5)));
                mats_item.setQuantity(new Integer(rs.getInt(6)));
                mats_item.setSheetSize(rs.getString(7));
                mats_item.setSheetCost(rs.getDouble(8));
                mats_item.setSheetMarkup(new Integer(rs.getInt(9)));
                mats_item.setMattypeID(new Integer(rs.getInt(10)));
                mats_item.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return mats_item;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO mats_item ("+(getItemID().intValue()!=0?"itemID,":"")+"invCode,name,colour,thickness,quantity,sheetSize,sheetCost,sheetMarkup,mattypeID) values("+(getItemID().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getItemID().intValue()!=0) {
                 ps.setObject(++n, getItemID());
             }
             ps.setObject(++n, getInvCode());
             ps.setObject(++n, getName());
             ps.setObject(++n, getColour());
             ps.setObject(++n, getThickness());
             ps.setObject(++n, getQuantity());
             ps.setObject(++n, getSheetSize());
             ps.setObject(++n, getSheetCost());
             ps.setObject(++n, getSheetMarkup());
             ps.setObject(++n, getMattypeID());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getItemID().intValue()==0) {
             stmt = "SELECT max(itemID) FROM mats_item";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setItemID(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE mats_item " +
                    "SET invCode = ?, name = ?, colour = ?, thickness = ?, quantity = ?, sheetSize = ?, sheetCost = ?, sheetMarkup = ?, mattypeID = ?" + 
                    " WHERE itemID = " + getItemID();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getInvCode());
                ps.setObject(2, getName());
                ps.setObject(3, getColour());
                ps.setObject(4, getThickness());
                ps.setObject(5, getQuantity());
                ps.setObject(6, getSheetSize());
                ps.setObject(7, getSheetCost());
                ps.setObject(8, getSheetMarkup());
                ps.setObject(9, getMattypeID());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (Mats_income.exists(getConnection(),"itemID = " + getItemID())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: key");
        }
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM mats_item " +
                "WHERE itemID = " + getItemID();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setItemID(new Integer(-getItemID().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getItemID().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT itemID,invCode,name,colour,thickness,quantity,sheetSize,sheetCost,sheetMarkup,mattypeID FROM mats_item " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Mats_item(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),rs.getString(4),new Integer(rs.getInt(5)),new Integer(rs.getInt(6)),rs.getString(7),rs.getDouble(8),new Integer(rs.getInt(9)),new Integer(rs.getInt(10))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Mats_item[] objects = new Mats_item[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Mats_item mats_item = (Mats_item) lst.get(i);
            objects[i] = mats_item;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT itemID FROM mats_item " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getItemID() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return itemID;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setItemID(id);
        setNew(prevIsNew);
    }

    public Integer getItemID() {
        return itemID;
    }

    public void setItemID(Integer itemID) throws ForeignKeyViolationException {
        setWasChanged(this.itemID != null && this.itemID != itemID);
        this.itemID = itemID;
        setNew(itemID.intValue() == 0);
    }

    public String getInvCode() {
        return invCode;
    }

    public void setInvCode(String invCode) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.invCode != null && !this.invCode.equals(invCode));
        this.invCode = invCode;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.name != null && !this.name.equals(name));
        this.name = name;
    }

    public String getColour() {
        return colour;
    }

    public void setColour(String colour) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.colour != null && !this.colour.equals(colour));
        this.colour = colour;
    }

    public Integer getThickness() {
        return thickness;
    }

    public void setThickness(Integer thickness) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.thickness != null && !this.thickness.equals(thickness));
        this.thickness = thickness;
    }

    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer quantity) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.quantity != null && !this.quantity.equals(quantity));
        this.quantity = quantity;
    }

    public String getSheetSize() {
        return sheetSize;
    }

    public void setSheetSize(String sheetSize) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.sheetSize != null && !this.sheetSize.equals(sheetSize));
        this.sheetSize = sheetSize;
    }

    public Double getSheetCost() {
        return sheetCost;
    }

    public void setSheetCost(Double sheetCost) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.sheetCost != null && !this.sheetCost.equals(sheetCost));
        this.sheetCost = sheetCost;
    }

    public Integer getSheetMarkup() {
        return sheetMarkup;
    }

    public void setSheetMarkup(Integer sheetMarkup) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.sheetMarkup != null && !this.sheetMarkup.equals(sheetMarkup));
        this.sheetMarkup = sheetMarkup;
    }

    public Integer getMattypeID() {
        return mattypeID;
    }

    public void setMattypeID(Integer mattypeID) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.mattypeID != null && !this.mattypeID.equals(mattypeID));
        this.mattypeID = mattypeID;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[10];
        columnValues[0] = getItemID();
        columnValues[1] = getInvCode();
        columnValues[2] = getName();
        columnValues[3] = getColour();
        columnValues[4] = getThickness();
        columnValues[5] = getQuantity();
        columnValues[6] = getSheetSize();
        columnValues[7] = getSheetCost();
        columnValues[8] = getSheetMarkup();
        columnValues[9] = getMattypeID();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setItemID(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setItemID(null);
        }
        setInvCode(flds[1]);
        setName(flds[2]);
        setColour(flds[3]);
        try {
            setThickness(Integer.parseInt(flds[4]));
        } catch(NumberFormatException ne) {
            setThickness(null);
        }
        try {
            setQuantity(Integer.parseInt(flds[5]));
        } catch(NumberFormatException ne) {
            setQuantity(null);
        }
        setSheetSize(flds[6]);
        try {
            setSheetCost(Double.parseDouble(flds[7]));
        } catch(NumberFormatException ne) {
            setSheetCost(null);
        }
        try {
            setSheetMarkup(Integer.parseInt(flds[8]));
        } catch(NumberFormatException ne) {
            setSheetMarkup(null);
        }
        try {
            setMattypeID(Integer.parseInt(flds[9]));
        } catch(NumberFormatException ne) {
            setMattypeID(null);
        }
    }
}
